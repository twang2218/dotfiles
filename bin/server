#!/bin/bash
#
# 文件名: server
#


# 根据 CLOUD_PROVIDER 设置所必须的环境变量

if [[ -z "$CLOUD_PROVIDER" ]]; then
    export CLOUD_PROVIDER=do
fi

REMOTE_USER=docker

case "$CLOUD_PROVIDER" in
    do)
        if [[ -z "$DIGITALOCEAN_ACCESS_TOKEN" ]]; then
            echo 'Cannot find Digial Ocean access key. Try run `eval $(cloud do)`'
            exit 1
        fi
        DOCKER_REPO='deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable'
        REGION=sfo2
        ;;
    ali)
        if [[ -z "$ECS_ACCESS_KEY_ID" ]]; then
            echo '无法找到阿里云的认证信息，可以尝试运行 `eval $(cloud ali)`'
            exit 1
        fi
        REGION=cn-zhangjiakou
        ZONE=cn-zhangjiakou-a
        DOCKER_REPO='deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu focal stable'
        DOCKER_MIRROR=https://jxus37ac.mirror.aliyuncs.com
        PIP_MIRROR=http://mirrors.aliyun.com/pypi/simple/
        CONDA_MAIN_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
        CONDA_FREE_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
        CONDA_FORGE_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
        ;;
esac

# set -xe

# 帮助将标题凸显出来
echo_title(){
    echo '===================================================================='
    echo "  $1"
    echo '===================================================================='
}

list_providers(){
    echo "Cloud Providers"
    echo
    echo "The CLOUD_PROVIDER environment variable should be set to the key listed here to use the provider"
    echo "The default cloud provider will be 'do'"
    echo
    echo "  do          Digital Ocean"
    echo "  ali         阿里云 (Aliyun)"
    echo
}

list_server(){
    case "$CLOUD_PROVIDER" in
        do)
            doctl compute droplet list "$@"
            ;;
        ali)
            aliyun ecs DescribeInstances --RegionId $REGION "$@" | jq '.Instances.Instance[] | [{name: .InstanceName, id: .InstanceId, ip: .PublicIpAddress.IpAddress[0], status: .Status, os: .OSName, cpu: .Cpu, memory: .Memory, zone: .ZoneId, created_at: .CreationTime}]'
            ;;
        *)
            echo "Unknown Cloud Provider ($CLOUD_PROVIDER)"
            exit 1
    esac
}

get_server_ip(){
    local server_name=$1

    case "$CLOUD_PROVIDER" in
        do)
            list_server --format Name,PublicIPv4 --no-header | grep "$server_name" | awk '{print $2}'
            ;;
        ali)
            list_server | jq --raw-output '.[] | select(.name == "'"$server_name"'") | .ip'
            ;;
        *)
            echo "Unknown Cloud Provider ($CLOUD_PROVIDER)"
            exit 1
    esac
}

# 生成 root 密码（阿里云需要）
get_root_password(){
    local security_file=$HOME/.security.password.env
    if [[ ! -f $security_file ]]; then
        openssl rand -out $security_file -base64 12
    fi

    export ROOT_PASSWORD=$(cat $security_file)
    echo $ROOT_PASSWORD
}

wait_for_ssh(){
    local server_name=$1

    echo "Waiting for the Server..."
    while true
    do
        local server_ip=$(get_server_ip $server_name)

        # Check server_ip
        if [[ ! -z "$server_ip" ]]
        then
            # Check SSH port
            if nc -zvw3 $server_ip 22
            then
                # Accept SSH key
                case "$CLOUD_PROVIDER" in
                    ali)
                        echo "root 密码为: '$(get_root_password)'"
                        # 赋予 root 密钥登录能力                        
                        ssh-copy-id -o StrictHostKeyChecking=accept-new root@$server_ip
                        ;;
                    *)
                        ssh -o StrictHostKeyChecking=accept-new root@$server_ip uname -a
                        ;;
                esac

                echo
                # Exit wait loop
                break
            fi
        fi
        
        echo -n '.'
        sleep 1
    done
}

create_do_server(){
    local remote_user=$1
    local server_name=$2
    local size=$3

    server_ip=$(get_server_ip $server_name)
    if [[ -n "$server_ip" ]]
    then
        echo "Server '$server_name'($server_ip) already exists."
        # show_remote_access_info $remote_user $server_ip
        return 1
    fi

    # Size:
    #   s-1vcpu-2gb     1 vcpu/     2 GB/   50 GB/      $10     (0.014/h)
    #   s-4vcpu-8gb     4 vcpu/     8 GB/   160 GB/     $40     (0.060/h)
    #   m-2vcpu-16gb    2 vcpu/     16 GB/  50 GB/      $90     (0.134/h)
    #   m-4vcpu-32gb    4 vcpu/     32 GB/  100 GB/     $180    (0.268/h)
    #   c-32            32 vcpu/    64 GB/  400 GB/     $640    (0.952/h)
    # Image:
    #   ubuntu-18-04-x64    Ubuntu 18.04.03 LTS
    #   ubuntu-20-04-x64    Ubuntu 20.04 LTS
    local image=ubuntu-20-04-x64
    # Region:
    #   nyc1    New York 1
    #   nyc3    New York 3
    #   sfo2    San Francisco 2
    # SSH Key
    #   1603583     Tao@Macbook     4a:c5:fe:d0:66:a1:20:7a:9f:84:7d:b9:0b:24:ea:73

    if [[ -e "$size" ]]
    then
        size=x1
    fi

    case "$size" in
        x1)     size=s-1vcpu-2gb ;;
        x2)     size=s-4vcpu-8gb ;;
        x3)     size=m-2vcpu-16gb ;;
        x4)     size=m-4vcpu-32gb ;;
        x5)     size=c-32 ;;
    esac

    echo_title "Creating Digital Ocean Server ($server_name)..."
    echo "  Region: $REGION"
    echo "  Size:   $size"
    echo "  Image:  $image"
    doctl compute droplet create -v $server_name \
        --size $size \
        --image $image \
        --region $REGION \
        --ssh-keys '4a:c5:fe:d0:66:a1:20:7a:9f:84:7d:b9:0b:24:ea:73'

    wait_for_ssh $server_name
}


get_ali_id(){
    local server_name=$1
    list_server | jq --raw-output '.[] | select(.name == "'"$server_name"'") | .id'
}

create_ali_server(){
    local remote_user=$1 
    local server_name=$2
    local size=$3

    if [[ -n "$(get_ali_id $server_name)" ]]; then
        echo "已创建阿里服务器 '$server_name'"
        return 1
    fi

    # server_ip=$(get_server_ip $server_name)
    # if [[ -n "$server_ip" ]]
    # then
    #     echo "Server ($server_name) already exists"
    #     show_remote_access_info $remote_user $server_ip
    #     return 1
    # fi

    # Size:
    #   规格                  C   M   Price/小时
    #   通用型 ecs.g6.large	    2	8GB	0.35
    #   通用型 ecs.g6.xlarge	4	16	0.70
    #   通用型 ecs.g6.2xlarge	8	32	1.40
    #   通用型 ecs.g6.3xlarge	12	48	2.10
    #   通用型 ecs.g6.4xlarge	16	64	2.80
    #   GPU计算型 ecs.gn6i-c4g1.xlarge	4	15	10.46
    #   GPU计算型 ecs.gn6i-c8g1.2xlarge	8	31	12.6

    # Image:
    #   cn-zhangjiakou
    #       ubuntu_18_04_x64_20G_alibase_20200717.vhd
    #       ubuntu_20_04_x64_20G_alibase_20200522.vhd
    local image=ubuntu_20_04_x64_20G_alibase_20200522.vhd

    # 安全组
    #   sg-8vba2t85gky1f74r4b4l     张家口地区：22,80,443,8000-10000
    local sgid=sg-8vba2t85gky1f74r4b4l

    # Region:
    #   cn-beijing      北京
    #   cn-qingdao      青岛
    #   cn-zhangjiakou  张家口
    #   cn-hongkong     香港
    local region=$REGION
    local zone=$ZONE
    # Password
    local password=$(get_root_password)
    echo "使用 '$password' 作为 root 用户的密码。"

    if [[ -e "$size" ]]
    then
        size=x1
    fi

    case "$size" in
        #   通用型 ecs.g6.large	            2	8GB	    0.35/小时
        x1)     size=ecs.g6.large           ;;
        #   通用型 ecs.g6.xlarge	        4	16GB	0.70/小时
        x2)     size=ecs.g6.xlarge          ;;
        #   通用型 ecs.g6.2xlarge	        8	32GB	1.40/小时
        x3)     size=ecs.g6.2xlarge         ;;
        #   GPU计算型 ecs.gn6i-c4g1.xlarge	4	15GB	10.46/小时
        x4)     size=ecs.gn6i-c4g1.xlarge   ;;
        #   GPU计算型 ecs.gn6i-c8g1.2xlarge	8	31GB	12.6/小时
        x5)     size=ecs.gn6i-c8g1.2xlarge  ;;
    esac

    echo_title "正在创建阿里云服务器 ($server_name)..."
    echo "  区域：  $zone"
    echo "  规格：  $size"
    echo "  镜像：  $image"
    # 参考：https://www.cnblogs.com/dudu/p/8887989.html
    aliyun ecs CreateInstance \
        --InstanceChargeType PostPaid   `# 按量付费`    \
        --RegionId $region              `# 可用区`      \
        --ZoneId $zone                                  \
        --IoOptimized optimized         `# IO优化`      \
        --InstanceType $size            `# 实力规格`    \
        --ImageId $image                `# 镜像ID`      \
        --InternetChargeType PayByTraffic   `# 公网按使用流量计费`  \
        --InternetMaxBandwidthOut 100   `# 公网最大带宽` \
        --SecurityGroupId $sgid         `# 安全组ID`    \
        --HostName $server_name         `# 主机名`      \
        --InstanceName $server_name     `# 示例名称`    \
        --Password "$password"          `# 密码`

    # 等待服务器的建立
    while true
    do
        local id=$(get_ali_id $server_name)

        # 查看是否已经建立成功并取得实例ID
        if [[ ! -z "$id" ]]
        then
            break
        fi
        
        echo -n '.'
        sleep 1
    done

    echo "等待服务器的分配..."
    sleep 20

    # 分配公网IP
    echo "正在分配公网 IP..."
    aliyun ecs AllocatePublicIpAddress --InstanceId $id
    # 启动服务器
    echo "正在启动服务器..."
    aliyun ecs StartInstance --InstanceId $id
    # 设置自动删除时间 (24个小时)
    local releast_time=$(date -v+24H -u '+%Y-%m-%dT%H:%M:%SZ')
    echo "正在设置自动删除时间 $releast_time (UTC)..."
    sleep 10
    aliyun ecs ModifyInstanceAutoReleaseTime --InstanceId $id --AutoReleaseTime $releast_time

    # 通过 SSH 等待服务器准备好
    wait_for_ssh $server_name
}

create_server(){
    local remote_user=$1
    local server_name=$2
    local size=$3

    if [[ -z "$server_name" ]]; then
        echo "Usage: $(basename $0) create <server_name> [size]"
        echo
        echo "  size        default size is 'x1'"
        echo
        return 1
    fi

    if [[ -z "$size" ]]; then
        size=x1
    fi

    case "$CLOUD_PROVIDER" in
        do)     create_do_server $remote_user $server_name $size   ;;
        ali)    create_ali_server $remote_user $server_name $size  ;;
        *)
            echo "Unknown Cloud Provider ($CLOUD_PROVIDER)"
            return -1
    esac
}

remote_sysctl(){
    local server=$1
    ssh root@$server "
        echo 'net.core.default_qdisc=fq' > /etc/sysctl.d/50-network-tune.conf
        echo 'net.ipv4.tcp_congestion_control=bbr' >> /etc/sysctl.d/50-network-tune.conf
    "
}

remote_is_user_exist(){
    local user=$1
    local server=$2
    ssh "root@$server" getent passwd | grep "$user"
}

remote_add_user(){
    local user=$1
    local server=$2

    echo_title "Adding User ($user)..."
    if remote_is_user_exist $user $server
    then
        echo "User ($user) exists"
    else
        # scp remote_add_user.sh root@$server:./
        # ssh root@$server "bash remote_add_user.sh $user"
        ssh root@$server "
            set -e
            useradd --create-home --user-group --shell /bin/bash docker
            mkdir -p /home/$user/.ssh
            cp /root/.ssh/authorized_keys /home/$user/.ssh/
            chown --recursive $user:$user /home/$user/.ssh
            echo '$user    ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers
        "
    fi
}

remote_is_docker_installed(){
    local user=$1
    local server=$2
    ssh $user@$server docker version
}

remote_install_docker(){
    local user=$1
    local server=$2

    echo_title "Installing Docker on remote system"
    if remote_is_docker_installed $user $server
    then
        echo "Docker has been installed on the remote"
    else
        # scp remote_install_docker.sh $user@$server:./
        # ssh $user@$server 'bash remote_install_docker.sh'
        ssh $user@$server "
            echo 'Installing prerequisite of Docker'
            sudo apt-get update
            sudo apt-get install -y \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg-agent \
                software-properties-common


            echo 'Adding Docker GPG key'
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

            sudo apt-key fingerprint 0EBFCD88

            echo 'Adding Docker repository'
            sudo add-apt-repository '$DOCKER_REPO'

            echo 'Installing Docker'
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            echo 'Adjust SSH MaxSessions for Docker-Compose'
            # https://github.com/docker/compose/issues/6463
            if sudo grep 'MaxSessions 100' /etc/ssh/sshd_config
            then
                echo 'Already add MaxSessions to sshd_config'
            else
                echo 'MaxSessions 100' | sudo tee -a /etc/ssh/sshd_config
                sudo systemctl restart ssh
            fi

            if [[ ! -z '$DOCKER_MIRROR' ]]; then
                echo 'Setup Docker Hub mirror'
                if [[ -f /etc/docker/daemon.json ]]; then
                    sudo mv /etc/docker/daemon.json /etc/docker/daemon.json.backup
                fi
                echo '{\"registry-mirrors\": [\"$DOCKER_MIRROR\"]}' | sudo tee /etc/docker/daemon.json
            fi

            echo 'Start Docker'
            sudo systemctl enable docker
            sudo systemctl restart docker
        "
    fi

    export DOCKER_HOST=ssh://$user@$server
    docker info
}

create_remote_system(){
    local remote_user=$1
    local server_name=$2
    local size=$3

    if [[ -z "$server_name" ]]; then
        echo "Usage: $(basename $0) create <server_name> [size]"
        echo
        echo "  size        default size is 'x1'"
        echo
        return 1
    fi

    if [[ -z "$size" ]]; then
        size=x1
    fi

    # Creating Server
    create_server $remote_user $server_name $size

    local server_ip=$(get_server_ip $server_name)
    sleep 2

    # Adding user to remote system
    remote_add_user $remote_user $server_ip

    # Installing Docker on remote system
    remote_install_docker $remote_user $server_ip

    case "$CLOUD_PROVIDER" in
        do)
            # Adding metrics on remote digital ocean system
            echo_title "Adding Digital Ocean metrics"
            ssh $remote_user@$server_ip "curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash"
            ;;
    esac

    # DNS
    domain register $server_name $server_ip
}

destroy_remote_system(){
    local server_name=$1

    if [[ -z "$server_name" ]]; then
        echo "Usage: $(basename $0) destroy <server_name>"
        echo
        return 1
    fi

    case "$CLOUD_PROVIDER" in
        do)
            doctl compute droplet delete $server_name -f
            ;;
        ali)
            local id=$(get_ali_id $server_name)
            if [[ -z "$id" ]]; then
                echo "Cannot find server ($server_name)"
                return 1
            fi
            echo "正在停止服务器 $server_name ($id) ..."
            aliyun ecs StopInstance --InstanceId $id
            sleep 20
            echo "正在删除服务器 $server_name ($id) ..."
            aliyun ecs DeleteInstance --InstanceId $id
            ;;
    esac

    # DNS
    domain unregister $server_name
}

remote_ssh(){
    local remote_user=$1
    local server=$2
    shift 2

    if [[ -z "$remote_user" || -z "$server" ]]; then
        echo "Usage: $(basename $0) ssh <user> <server>"
        echo
        return 1
    fi

    ssh $remote_user@$(get_server_ip $server) $@
}

remote_docker(){
    local remote_user=$1
    local server=$2
    shift 2

    if [[ -z "$server" ]]; then
        echo "Usage: $(basename $0) docker <server_name> ..."
        return 1
    fi

    local ip=$(get_server_ip $server)
    if [[ -z "$ip" ]]; then
        echo "Server '$server' does not exist."
        return 1
    fi

    export DOCKER_HOST=ssh://$remote_user@$ip

    docker "$@"
}

remote_docker_compose(){
    local remote_user=$1
    local server=$2
    shift 2

    if [[ -z "$server" ]]; then
        echo "Usage: $(basename $0) compose <server_name> ..."
        return 1
    fi

    local ip=$(get_server_ip $server)
    export DOCKER_HOST=ssh://$remote_user@$ip

    docker-compose $@
}

info() {
    local remote_user=$1
    local server=$2
    shift

    if [[ -z "$server" ]]; then
        echo "Usage: $(basename $0) compose <server_name> ..."
        return 1
    fi

    local ip=$(get_server_ip $server)
    export DOCKER_HOST=ssh://$remote_user@ip

    echo "  export DOCKER_HOST=$DOCKER_HOST"
    echo
}

aws_create_credential(){
    aws iam create-user --user-name jupyter
    aws iam create-access-key --user-name jupyter
}

usage(){
    echo "Usage: $(basename $0) <command>"
    echo
    echo "  create <server_name> [size]                 create a server"
    echo "  destroy <server_name>                       destroy the server"
    echo "  ssh <server_name>                           SSH into the server"
    echo "  ip <server_name>                            get server IP address"
    echo "  docker <server_name>                        run docker command on remote server"
    echo "  compose <server_name>                       run docker-compose command on remote server"
    echo "  info <server_name>                          show remote access"
    echo "  list                                        list all server"
    echo "  providers                                   list all the providers"
    echo
}

# 程序入口
command=$1
shift

case $command in
    create)             create_remote_system "$REMOTE_USER" "$@"  ;;
    destroy)            destroy_remote_system "$@" ;;
    ssh)                remote_ssh "$REMOTE_USER" "$@" ;;
    ip)                 get_server_ip "$@" ;;
    docker)             remote_docker "$REMOTE_USER" "$@" ;;
    compose)            remote_docker_compose "$REMOTE_USER" "$@" ;;
    info)               remote_info "$REMOTE_USER" "$@" ;;
    list)               list_server "$@"   ;;
    providers)          list_providers "$@"  ;;
    *)                  usage ;;
esac