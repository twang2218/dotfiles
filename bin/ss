#!/bin/bash
# filename: ss
#
# 短连接地址：http://t.cn/RWiJf2w
#
# 将该脚本放入 `~/bin/` 目录下，打通路径并赋予可执行权限后即可使用。
#
#   $ curl http://t.cn/RWiJf2w -o ~/bin/ss
#   $ chmod a+x ~/bin/ss
#
# 使用命令：
#
# * 启动代理:   ss proxy start
# * 停止代理:   ss proxy stop
# * 代理状态:   ss status
# * 给命令行加载代理环境变量: eval $(./ss env)
# * 卸载命令行的代理环境变量: eval $(./ss env --unset)
# * 配置 DNS:   ss dns start
# * 删除 DNS:   ss dns stop
# * 配置本地 hosts 文件：  ss host start
# * 删除本地 hosts 文件：  ss host stop
#
# 使用该脚本的前提条件
#
# 1、机器上需要已经装好了 Docker 以及 docker-machine
# 2、如果需要配置 DNS，则需要安装 doctl： https://github.com/digitalocean/doctl ，mac 下 brew 就可以安装
# 3、需要安装 vultr 的 docker-machine 驱动： https://github.com/janeczku/docker-machine-vultr
# 4、Vultr 的 API Key 需要在 VULTR_API_KEY 环境变量中
#
#   export VULTR_API_KEY=你的API_KEY
#
# 5、由于Vultr默认为 RancherOS，所以还需要设置为 Ubuntu 16.04 LTS
#
#   export VULTR_OS=215
#
# 6、如果需要 DNS 配置，则也需要有 Digtial Ocean 的 API TOKEN 在环境变量 DIGITALOCEAN_ACCESS_TOKEN 中
#
#   export DIGITALOCEAN_ACCESS_TOKEN=你的DO_ACCESS_TOKEN
#

DOMAIN=lab99.org
NAME=ss
SERVER_PORT=443
LOCAL_PORT=1080
MODE=aes-256-gcm
TOKEN=dockerrocks

# 默认使用 Digital Ocean 服务器，这样可以避免额外安装 Vultr 驱动。如果需要使用 vultr 服务器，则替换下面的驱动为 vultr
# MACHINE_DRIVER=vultr
MACHINE_DRIVER=digitalocean

# Docker Machine - Digital Ocean
#
# DIGITALOCEAN_ACCESS_TOKEN=xxx
#
# Digtial Ocean Region
#
# nyc1    New York 1
# sgp1    Singapore 1
# lon1    London 1  
# nyc3    New York 3
# ams3    Amsterdam 3
# fra1    Frankfurt 1
# tor1    Toronto 1 
# sfo2    San Francisco 2
# blr1    Bangalore 1
#
DIGITALOCEAN_REGION=nyc1

# Digital Ocean Size
# Slug              Memory    VCPUs    Disk    Price Monthly    Price Hourly
# s-1vcpu-1gb       1024      1        25      5.00             0.007440
# s-1vcpu-2gb       2048      1        50      10.00            0.014880
# s-2vcpu-4gb       4096      2        80      20.00            0.029760
# s-4vcpu-8gb       8192      4        160     40.00            0.059520
DIGITALOCEAN_SIZE=s-1vcpu-1gb

# Docker Machine - Vultr
#
# VULTR_API_KEY=xxx
# 
# Vultr Region ID
# * 25 - Tokyo, JP
# * 19 - Sydney, AU
# * 40 - Singapore
# * 39 - Miami
VULTR_REGION=39

# Vultr Plan ID
# * 201 - 1024 MB RAM,25 GB SSD,1.00 TB BW - $5/month
# * 202 - 2048 MB RAM,40 GB SSD,2.00 TB BW - $10/month
VULTR_PLAN=201

function provision_linux() {
  # Install Docker Machine
  curl -fL https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` -o /tmp/docker-machine
  sudo install /tmp/docker-machine /usr/local/bin/docker-machine
  # Install Docker Machine Vultr Driver
  curl -fL https://github.com/janeczku/docker-machine-vultr/releases/download/v1.3.0/docker-machine-driver-vultr-`uname -s`-`uname -m` -o /tmp/docker-machine-driver-vultr
  sudo install /tmp/docker-machine-driver-vultr /usr/local/bin/docker-machine-driver-vultr
}

function provision_mac() {
  brew install docker-machine docker-machine-driver-vultr docker-machine-driver-digitalocean
}

function provision() {
  local subcmd=$1
  shift
  case "$subcmd" in
    linux)    provision_linux ;;
    mac)      provision_mac ;;
    *)        echo "Usage: $0 provision <linux|mac>" ;;
  esac
}

function create_machine() {
  # Create a docker host
  docker-machine create $NAME
  docker-machine ls | grep $NAME

  # Prepare the machine
  docker-machine ssh $NAME  << EOF
  apt-get update
  apt-get install --install-recommends -y linux-generic-hwe-16.04 
  # apt-get dist-upgrade -y
  echo 'net.core.default_qdisc=fq' >> /etc/sysctl.conf
  echo 'net.ipv4.tcp_congestion_control=bbr' >> /etc/sysctl.conf
  reboot
EOF

  sleep 20

  docker-machine ssh $NAME "sysctl net.ipv4.tcp_available_congestion_control; lsmod | grep bbr"
}

function remove_machine() {
  # Simply remove the machine
  docker-machine rm -y $NAME
  echo "Removed docker host: $NAME"
}

function get_machine_ip() {
  ip=$(docker-machine ip $NAME)
  if [ -z "$ip" ]; then
    echo "Cannot found docker-machine: $NAME"
    exit 1
  fi

  echo $ip
}

function create_dns_record() {
  # Get IP of the docker host
  local ip=$(get_machine_ip)

  # Create DNS record for constant usage
  local id=`doctl compute domain records list $DOMAIN | grep $NAME | cut -d' ' -f1`
  if [ -z "$id" ]; then
    # create one
    id=`doctl compute domain records create $DOMAIN --record-name=$NAME --record-data=$ip --record-type=A | grep $NAME | cut -d' ' -f1`
    if [ -z "$id" ]; then
      echo "Failed to create the $NAME.$DOMAIN records"
    else
      echo "Created DNS record: $NAME.$DOMAIN => $ip"
    fi
  else
    # update the existing one
    doctl compute domain records update $DOMAIN --record-id=$id --record-data=$ip
    echo "Updated DNS record: $NAME.$DOMAIN => $ip"
  fi
}

function remove_dns_record() {
  # Remove the dns record
  local id=`doctl compute domain records list $DOMAIN | grep $NAME | cut -d' ' -f1`
  if [ -z "$id" ]; then
    echo "DNS record '$NAME.$DOMAIN' does not exist"
  else
    doctl compute domain records delete lab99.org "$id" -f
    echo "DNS record '$NAME.$DOMAIN' removed"
  fi
}

function create_hosts_record() {
  # Get IP of the docker host
  local ip=$(get_machine_ip)

  # Remove the host record if it exists
  remove_hosts_record

  # Append record to /etc/hosts
  echo "$ip   $NAME.$DOMAIN" | sudo tee -a /etc/hosts
}

function remove_hosts_record() {
  if grep -q $NAME.$DOMAIN /etc/hosts; then
    sudo sed -i "/$NAME.$DOMAIN/d" /etc/hosts
  fi
}

function start_server() {
  # Start Proxy on remote server
  eval $(docker-machine env $NAME)
  # Stop the running container
  docker rm -f $NAME
  # Start a new one
  docker run --name $NAME -d \
    -p $SERVER_PORT:$SERVER_PORT \
    -p $SERVER_PORT:$SERVER_PORT/udp \
    mritd/shadowsocks \
      -m "ss-server" \
      -s "-s 0.0.0.0 -p $SERVER_PORT -m $MODE -k $TOKEN --fast-open" \
      -x -e "kcpserver" \
      -k "-t 127.0.0.1:$SERVER_PORT -l :$SERVER_PORT -mode fast2"
}

function start_client() {
  # Run client on the local
  eval $(docker-machine env --unset)
  # Stop the running container
  docker rm -f $NAME
  # Start a new one
  local ip=$(get_machine_ip)
  docker run --name $NAME -dt -p $LOCAL_PORT:$LOCAL_PORT \
    mritd/shadowsocks \
      -m "ss-local" \
      -s "-s 127.0.0.1 -p $SERVER_PORT -b 0.0.0.0 -l $LOCAL_PORT -m $MODE -k $TOKEN --fast-open" \
      -x -e "kcpclient" \
      -k "-r ${ip}:$SERVER_PORT -l :$SERVER_PORT -mode fast2"
}

function stop_client() {
  # Stop client on the local
  eval $(docker-machine env --unset)
  docker stop $NAME
  docker rm -f $NAME
}

function start_proxy() {
  eval $(environment --unset)
  create_machine
  start_server
  start_client
}

function stop_proxy() {
  eval $(environment --unset)
  stop_client
  remove_machine
}

function status() {
  eval $(environment --unset)
  docker-machine ls --filter "name=$NAME"
  eval $(docker-machine env $NAME)
  docker ps -f "name=$NAME" -a
  docker logs $@ $NAME
}

function proxy() {
  local subcmd=$1
  shift
  case "$subcmd" in
    start)  start_proxy $@ ;;
    stop)   stop_proxy $@ ;;
    *)      echo "Usage: $0 proxy <start|stop>" ;;
  esac
}

function dns() {
  local subcmd=$1
  shift
  case "$subcmd" in
    start)    create_dns_record ;;
    stop)     remove_dns_record ;;
    *)        echo "Usage: $0 dns <start|stop>" ;;
  esac
}

function host() {
  local subcmd=$1
  shift
  case "$subcmd" in
    start)    create_host_record ;;
    stop)     remove_host_record ;;
    *)        echo "Usage: $0 host <start|stop>" ;;
  esac
}

function environment() {
  if [ "$1" = "--unset" ]; then
    # Unset all proxy env
    echo unset http_proxy
    echo unset https_proxy
    echo unset HTTP_PROXY
    echo unset HTTPS_PROXY
    echo unset all_proxy
    echo "# Run: eval \$($0 env --unset)"
  else
    # Set proxy env
    local http_proxy=socks5://127.0.0.1:$LOCAL_PORT
    echo export http_proxy=$http_proxy
    echo export https_proxy=$http_proxy
    echo export HTTP_PROXY=$http_proxy
    echo export HTTPS_PROXY=$http_proxy
    echo export all_proxy=$http_proxy
    echo "# Run: eval \$($0 env)"
  fi
}

command=$1
shift

case $command in
  provision)    provision $@ ;;
  proxy)        proxy $@ ;;
  dns)          dns $@ ;;
  host)         host $@ ;;
  status)       status ;;
  env)          environment $@ ;;
  *)            echo "Usage: $0 (proxy|dns|host|status|env|provision)" ;;
esac
